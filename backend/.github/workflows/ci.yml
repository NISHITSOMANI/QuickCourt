name: QuickCourt Backend CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/ci.yml'

defaults:
  run:
    working-directory: backend

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    services:
      mongodb:
        image: mongo:5.0
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Create uploads directory
      run: mkdir -p uploads

    - name: Run linting
      run: npm run lint

    - name: Check code formatting
      run: npm run format:check

    - name: Run tests
      run: npm test
      env:
        NODE_ENV: test
        MONGODB_URI_TEST: mongodb://root:password@localhost:27017/quickcourt_test?authSource=admin
        JWT_SECRET: test-jwt-secret-for-ci-pipeline-only
        JWT_REFRESH_SECRET: test-refresh-secret-for-ci-pipeline-only
        JWT_ACCESS_EXPIRES_IN: 15m
        JWT_REFRESH_EXPIRES_IN: 7d
        SMTP_HOST: localhost
        SMTP_PORT: 587
        SMTP_USER: test@example.com
        SMTP_PASS: testpassword
        CORS_ALLOWED_ORIGINS: http://localhost:3000
        RATE_LIMIT_WINDOW_MS: 900000
        RATE_LIMIT_MAX_REQUESTS: 100
        RATE_LIMIT_AUTH_WINDOW_MS: 60000
        RATE_LIMIT_AUTH_MAX_REQUESTS: 5
        CACHE_TTL_SECONDS: 300
        CACHE_MAX_SIZE: 100
        UPLOAD_MAX_SIZE: 5242880
        UPLOAD_ALLOWED_TYPES: jpg,jpeg,png,pdf
        CIRCUIT_BREAKER_TIMEOUT: 3000
        CIRCUIT_BREAKER_ERROR_THRESHOLD: 50
        CIRCUIT_BREAKER_RESET_TIMEOUT: 30000
        LOG_LEVEL: error
        LOG_FILE: logs/app.log
        LOCK_TTL_SECONDS: 300
        LOCK_RETRY_DELAY_MS: 100
        LOCK_MAX_RETRIES: 10
        BOOKING_ADVANCE_LIMIT_DAYS: 30
        BOOKING_CANCELLATION_WINDOW_HOURS: 24
        PAYMENT_WEBHOOK_SECRET: test-webhook-secret

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.node-version == '18.x'
      with:
        file: backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level moderate

    - name: Check for outdated packages
      run: npm outdated || true

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: npm ci --only=production

    - name: Create production build artifact
      run: |
        tar -czf ../quickcourt-backend-${{ github.sha }}.tar.gz \
          --exclude=node_modules \
          --exclude=.git \
          --exclude=coverage \
          --exclude=logs \
          --exclude=uploads \
          .

    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: quickcourt-backend-${{ github.sha }}
        path: quickcourt-backend-${{ github.sha }}.tar.gz
        retention-days: 30

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: SSH to staging server and deploy
        # ssh user@staging-server 'cd /app && git pull && npm install && pm2 restart all'

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: SSH to production server and deploy
        # ssh user@production-server 'cd /app && git pull && npm install && pm2 restart all'
